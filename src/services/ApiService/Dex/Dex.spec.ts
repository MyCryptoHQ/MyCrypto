import mockAxios from 'jest-mock-axios';

import { fAssets, fRopDAI, fSwapQuote } from '@fixtures';
import { ITxData, ITxGasLimit, ITxGasPrice, ITxToAddress, ITxType, ITxValue } from '@types';

import { DexService } from '.';
import { formatTradeTx } from './Dex';

describe('SwapFlow', () => {
  afterEach(() => {
    mockAxios.reset();
  });
  describe('getOrderDetails', () => {
    it('returns the expected two transactions for a multi tx swap', async () => {
      const promise = DexService.instance.getOrderDetailsFrom(null, fRopDAI, fAssets[0], '1');
      mockAxios.mockResponse({
        data: { ...fSwapQuote }
      });
      const result = await promise;
      expect(result.approvalTx).toStrictEqual({
        chainId: 1,
        data:
          '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000000000000000000000000000000de0b6b3a7640000',
        from: undefined,
        gasPrice: '0x23db1d8400',
        to: '0x6b175474e89094c44da98b954eedeac495271d0f',
        type: 'APPROVAL',
        value: '0x0'
      });
      expect(result.tradeTx).toStrictEqual({
        chainId: 1,
        data:
          '0xd9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000002429108b8f331000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000096596a1ef6601a8b3a',
        gasPrice: '0x23db1d8400',
        gasLimit: '0x21340',
        to: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
        type: 'SWAP',
        value: '0x0'
      });
    });
  });

  describe('formatTradeTx', () => {
    it('Prepares the value field for the trade tx', () => {
      expect(
        formatTradeTx({
          to: '0xA65440C4CC83D70b44cF244a0da5373acA16a9cb' as ITxToAddress,
          data: '0x5d46ec340000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000e807dc3fe542f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a1530c4c41db0b0b2bb646cb5eb1a67b715866700000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a1530c4c41db0b0b2bb646cb5eb1a67b715866700000000000000000000000000000000000000000000000000000000000000a4ddf7e1a700000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000e807dc3fe542f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005e6275fe0000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000' as ITxData,
          value: '50000' as ITxValue,
          gasLimit: '0x21340' as ITxGasLimit,
          gasPrice: '0x23db1d8400' as ITxGasPrice
        })
      ).toEqual({
        to: '0xA65440C4CC83D70b44cF244a0da5373acA16a9cb' as ITxToAddress,
        data: '0x5d46ec340000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000e807dc3fe542f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a1530c4c41db0b0b2bb646cb5eb1a67b715866700000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a1530c4c41db0b0b2bb646cb5eb1a67b715866700000000000000000000000000000000000000000000000000000000000000a4ddf7e1a700000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000e807dc3fe542f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005e6275fe0000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000' as ITxData,
        value: '0xc350' as ITxValue,
        gasLimit: '0x21340' as ITxGasLimit,
        gasPrice: '0x23db1d8400' as ITxGasPrice,
        chainId: 1,
        type: ITxType.SWAP
      });
    });
  });
});
