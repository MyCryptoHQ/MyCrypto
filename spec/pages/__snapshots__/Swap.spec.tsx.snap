// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render snapshot 1`] = `
<Swap
  bityOrder={Object {}}
  bityOrderCreateRequestedSwap={[Function]}
  bityOrderStatus={null}
  bityRates={
    Object {
      "allIds": Array [],
      "byId": Object {},
    }
  }
  changeStepSwap={[Function]}
  destination={
    Object {
      "amount": NaN,
      "id": "ETH",
    }
  }
  destinationAddress=""
  destinationAddressSwap={[Function]}
  history={
    Object {
      "action": "PUSH",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 2,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "key": "e08jz7",
        "pathname": "/swap",
        "search": "",
        "state": Object {},
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  initSwap={[Function]}
  isFetchingRates={null}
  isOffline={false}
  isPostingOrder={false}
  loadBityRatesRequestedSwap={[Function]}
  loadShapeshiftRatesRequestedSwap={[Function]}
  location={
    Object {
      "hash": "",
      "key": "e08jz7",
      "pathname": "/swap",
      "search": "",
      "state": Object {},
    }
  }
  match={
    Object {
      "isExact": true,
      "params": Object {},
      "path": "/swap",
      "url": "/swap",
    }
  }
  options={
    Object {
      "allIds": Array [],
      "byId": Object {},
    }
  }
  origin={
    Object {
      "amount": NaN,
      "id": "BTC",
    }
  }
  outputTx={null}
  paymentAddress={null}
  provider="shapeshift"
  restartSwap={[Function]}
  secondsRemaining={null}
  shapeshiftOrder={Object {}}
  shapeshiftOrderCreateRequestedSwap={[Function]}
  shapeshiftOrderStatus={null}
  shapeshiftRates={
    Object {
      "allIds": Array [],
      "byId": Object {},
    }
  }
  showNotification={[Function]}
  startOrderTimerSwap={[Function]}
  startPollBityOrderStatus={[Function]}
  startPollShapeshiftOrderStatus={[Function]}
  step={1}
  stopLoadBityRatesSwap={[Function]}
  stopLoadShapeshiftRatesSwap={[Function]}
  stopOrderTimerSwap={[Function]}
  stopPollBityOrderStatus={[Function]}
  stopPollShapeshiftOrderStatus={[Function]}
  swapProvider={[Function]}
/>
`;
